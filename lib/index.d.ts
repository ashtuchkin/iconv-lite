/*
 * ---------------------------------------------------------------------------------------------
 * DO NOT EDIT THIS FILE MANUALLY.
 * THIS FILE IS AUTOMATICALLY GENERATED.
 * TO UPDATE, RUN `npm run typegen` AND COMMIT THE CHANGES.
 * ---------------------------------------------------------------------------------------------
 */

/*---------------------------------------------------------------------------------------------
 * REQUIREMENT: This definition is dependent on the @types/node definition.
 *
 * `npm install --save-dev @types/node`
 *
 * This file provides detailed typings for all encodings supported by iconv-lite,
 * based on the official wiki and source code:
 * https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings
 *--------------------------------------------------------------------------------------------*/

/** A union of all supported encoding strings in `iconv-lite`. */
export type SupportedEncoding =
  | "10000"
  | "10006"
  | "10007"
  | "10029"
  | "10079"
  | "10081"
  | "1046"
  | "1124"
  | "1125"
  | "1129"
  | "1133"
  | "1161"
  | "1162"
  | "1163"
  | "1250"
  | "1251"
  | "1252"
  | "1253"
  | "1254"
  | "1255"
  | "1256"
  | "1257"
  | "1258"
  | "20866"
  | "21866"
  | "28591"
  | "28592"
  | "28593"
  | "28594"
  | "28595"
  | "28596"
  | "28597"
  | "28598"
  | "28599"
  | "28600"
  | "28601"
  | "28603"
  | "28604"
  | "28605"
  | "28606"
  | "437"
  | "737"
  | "775"
  | "808"
  | "850"
  | "852"
  | "855"
  | "856"
  | "857"
  | "858"
  | "860"
  | "861"
  | "862"
  | "863"
  | "864"
  | "865"
  | "866"
  | "869"
  | "874"
  | "922"
  | "932"
  | "936"
  | "949"
  | "950"
  | "ansix34"
  | "ansix341968"
  | "ansix341986"
  | "arabic"
  | "arabic8"
  | "armscii8"
  | "ascii"
  | "ascii8bit"
  | "asmo708"
  | "base64"
  | "big5"
  | "big5hkscs"
  | "binary"
  | "celtic"
  | "celtic8"
  | "cesu8"
  | "chinese"
  | "cn"
  | "cnbig5"
  | "cp1046"
  | "cp1124"
  | "cp1125"
  | "cp1129"
  | "cp1133"
  | "cp1161"
  | "cp1162"
  | "cp1163"
  | "cp1250"
  | "cp1251"
  | "cp1252"
  | "cp1253"
  | "cp1254"
  | "cp1255"
  | "cp1256"
  | "cp1257"
  | "cp1258"
  | "cp20866"
  | "cp21866"
  | "cp28591"
  | "cp28592"
  | "cp28593"
  | "cp28594"
  | "cp28595"
  | "cp28596"
  | "cp28597"
  | "cp28598"
  | "cp28599"
  | "cp28600"
  | "cp28601"
  | "cp28603"
  | "cp28604"
  | "cp28605"
  | "cp28606"
  | "cp367"
  | "cp437"
  | "cp720"
  | "cp737"
  | "cp775"
  | "cp808"
  | "cp819"
  | "cp850"
  | "cp852"
  | "cp855"
  | "cp856"
  | "cp857"
  | "cp858"
  | "cp860"
  | "cp861"
  | "cp862"
  | "cp863"
  | "cp864"
  | "cp865"
  | "cp866"
  | "cp869"
  | "cp874"
  | "cp922"
  | "cp932"
  | "cp936"
  | "cp949"
  | "cp950"
  | "cpgr"
  | "csascii"
  | "csbig5"
  | "cseuckr"
  | "csgb2312"
  | "cshproman8"
  | "csibm1046"
  | "csibm1124"
  | "csibm1125"
  | "csibm1129"
  | "csibm1133"
  | "csibm1161"
  | "csibm1162"
  | "csibm1163"
  | "csibm437"
  | "csibm737"
  | "csibm775"
  | "csibm850"
  | "csibm852"
  | "csibm855"
  | "csibm856"
  | "csibm857"
  | "csibm858"
  | "csibm860"
  | "csibm861"
  | "csibm862"
  | "csibm863"
  | "csibm864"
  | "csibm865"
  | "csibm866"
  | "csibm869"
  | "csibm922"
  | "csiso14jisc6220ro"
  | "csiso58gb231280"
  | "csisolatin1"
  | "csisolatin2"
  | "csisolatin3"
  | "csisolatin4"
  | "csisolatin5"
  | "csisolatin6"
  | "csisolatinarabic"
  | "csisolatincyrillic"
  | "csisolatingreek"
  | "csisolatinhebrew"
  | "cskoi8r"
  | "csksc56011987"
  | "csmacintosh"
  | "cspc775baltic"
  | "cspc850multilingual"
  | "cspc862latinhebrew"
  | "cspc8codepage437"
  | "cspcp852"
  | "csshiftjis"
  | "cyrillic"
  | "ecma114"
  | "ecma118"
  | "elot928"
  | "euccn"
  | "eucjp"
  | "euckr"
  | "gb18030"
  | "gb198880"
  | "gb2312"
  | "gb23121980"
  | "gb231280"
  | "gbk"
  | "georgianacademy"
  | "georgianps"
  | "greek"
  | "greek8"
  | "hebrew"
  | "hebrew8"
  | "hex"
  | "hproman8"
  | "ibm1046"
  | "ibm1051"
  | "ibm1124"
  | "ibm1125"
  | "ibm1129"
  | "ibm1133"
  | "ibm1161"
  | "ibm1162"
  | "ibm1163"
  | "ibm1168"
  | "ibm367"
  | "ibm437"
  | "ibm737"
  | "ibm775"
  | "ibm808"
  | "ibm819"
  | "ibm850"
  | "ibm852"
  | "ibm855"
  | "ibm856"
  | "ibm857"
  | "ibm858"
  | "ibm860"
  | "ibm861"
  | "ibm862"
  | "ibm863"
  | "ibm864"
  | "ibm865"
  | "ibm866"
  | "ibm869"
  | "ibm878"
  | "ibm922"
  | "iso646cn"
  | "iso646irv"
  | "iso646jp"
  | "iso646us"
  | "iso88591"
  | "iso885910"
  | "iso885911"
  | "iso885913"
  | "iso885914"
  | "iso885915"
  | "iso885916"
  | "iso88592"
  | "iso88593"
  | "iso88594"
  | "iso88595"
  | "iso88596"
  | "iso88597"
  | "iso88598"
  | "iso88599"
  | "isoceltic"
  | "isoir100"
  | "isoir101"
  | "isoir109"
  | "isoir110"
  | "isoir126"
  | "isoir127"
  | "isoir138"
  | "isoir14"
  | "isoir144"
  | "isoir148"
  | "isoir149"
  | "isoir157"
  | "isoir166"
  | "isoir179"
  | "isoir199"
  | "isoir203"
  | "isoir226"
  | "isoir57"
  | "isoir58"
  | "isoir6"
  | "jisc62201969ro"
  | "jp"
  | "koi8r"
  | "koi8ru"
  | "koi8t"
  | "koi8u"
  | "korean"
  | "ksc5601"
  | "ksc56011987"
  | "ksc56011989"
  | "l1"
  | "l10"
  | "l2"
  | "l3"
  | "l4"
  | "l5"
  | "l6"
  | "l7"
  | "l8"
  | "l9"
  | "latin1"
  | "latin10"
  | "latin2"
  | "latin3"
  | "latin4"
  | "latin5"
  | "latin6"
  | "latin7"
  | "latin8"
  | "latin9"
  | "mac"
  | "maccenteuro"
  | "maccroatian"
  | "maccyrillic"
  | "macgreek"
  | "maciceland"
  | "macintosh"
  | "macroman"
  | "macromania"
  | "macthai"
  | "macturkish"
  | "macukraine"
  | "mik"
  | "ms31j"
  | "ms932"
  | "ms936"
  | "ms949"
  | "ms950"
  | "msansi"
  | "msarab"
  | "mscyrl"
  | "msee"
  | "msgreek"
  | "mshebr"
  | "mskanji"
  | "msturk"
  | "pt154"
  | "r8"
  | "rk1048"
  | "roman8"
  | "shiftjis"
  | "sjis"
  | "strk10482002"
  | "tcvn"
  | "tcvn5712"
  | "tcvn57121"
  | "thai"
  | "thai8"
  | "tis620"
  | "tis6200"
  | "tis62025291"
  | "tis62025330"
  | "turkish"
  | "turkish8"
  | "ucs2"
  | "unicode11utf8"
  | "us"
  | "usascii"
  | "utf16le"
  | "utf8"
  | "viscii"
  | "win1250"
  | "win1251"
  | "win1252"
  | "win1253"
  | "win1254"
  | "win1255"
  | "win1256"
  | "win1257"
  | "win1258"
  | "win874"
  | "winbaltrim"
  | "windows1250"
  | "windows1251"
  | "windows1252"
  | "windows1253"
  | "windows1254"
  | "windows1255"
  | "windows1256"
  | "windows1257"
  | "windows1258"
  | "windows31j"
  | "windows874"
  | "windows932"
  | "windows936"
  | "windows949"
  | "windows950"
  | "xgbk"
  | "xroman8"
  | "xsjis"
  | "xxbig5"
  | (string & {});

export interface DecodeOptions {
  /** Strips the byte order mark (BOM) from the input, when decoding. @default true */
  stripBOM?: boolean;
  /** Overrides the default endianness for `UTF-16` and `UTF-32` decodings. */
  defaultEncoding?: "utf16be" | "utf32be";
}

export interface EncodeOptions {
  /** Adds a byte order mark (BOM) to the output, when encoding. @default false */
  addBOM?: boolean;
  /** Overrides the default endianness for `UTF-32` encoding. */
  defaultEncoding?: "utf32be";
}

export interface EncoderStream {
  write(str: string): Buffer;
  end(): Buffer | undefined;
}

export interface DecoderStream {
  write(buf: Buffer): string;
  end(): string | undefined;
}

declare const iconv: {
  //   --- Basic API ---

  /** Decodes a `Buffer` into a `string`, using the provided `encoding`. */
  decode(buffer: Buffer | Uint8Array, encoding: SupportedEncoding, options?: DecodeOptions): string;

  /** Encodes a `string` into a `Buffer`, using the provided `encoding`. */
  encode(content: string, encoding: SupportedEncoding, options?: EncodeOptions): Buffer;

  /** Checks if a given encoding is supported by `iconv-lite`. */
  encodingExists(encoding: string): encoding is SupportedEncoding;

  //   --- Stream API ---

  /** Creates a stream that decodes binary data from a given `encoding` into strings. */
  decodeStream(encoding: SupportedEncoding, options?: DecodeOptions): NodeJS.ReadWriteStream;

  /** Creates a stream that encodes strings into binary data in a given `encoding`. */
  encodeStream(encoding: SupportedEncoding, options?: EncodeOptions): NodeJS.ReadWriteStream;

  //   --- Low-level stream APIs ---

  /** Creates and returns a low-level encoder stream. */
  getEncoder(encoding: SupportedEncoding, options?: EncodeOptions): EncoderStream;

  /** Creates and returns a low-level decoder stream. */
  getDecoder(encoding: SupportedEncoding, options?: DecodeOptions): DecoderStream;
};

export default iconv;
